# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  drive:
    # Creates a build matrix for your jobs. You can define different
    # variations of an environment to run each job in.
    strategy:
      # A set of different configurations of the virtual  
      # environment.
      matrix:
        device:
        - "iPhone 8 (13.1)"
        - "iPhone 11 Pro Max (13.1)"
      # When set to true, GitHub cancels all in-progress jobs if any        
      # matrix job fails.
      fail-fast: false
    # The type of machine to run the job on.
    runs-on: macOS-latest
    # Contains a sequence of tasks.
    steps:
    # A name for your step to display on GitHub.
    - name: "List all simulators"
      run: "xcrun instruments -s"
    - name: "Start Simulator"
      run: |
        UDID=$(
          xcrun instruments -s |
          awk \
            -F ' *[][]' \
            -v 'device=${{ matrix.device }}' \
            '$1 == device { print $2 }'
        )
        xcrun simctl boot "${UDID:?No Simulator with this name found}"
    # The branch or tag ref that triggered the workflow will be 
    # checked out.
    # https://github.com/actions/checkout
    - uses: actions/checkout@v1
    # Sets up a flutter environment.
    # https://github.com/marketplace/actions/flutter-action
    - uses: subosito/flutter-action@v1
      with:
        channel: 'stable' # or: 'dev' or 'beta'
    - name: "Run Flutter Driver tests"
      run: "flutter test integration_test/app_test.dart"



    # runs-on: ubuntu-latest

    # steps:
    #   - uses: actions/checkout@v2
    #   - uses: actions/setup-java@v1
    #     with:
    #       java-version: '12.x'
    #   - uses: subosito/flutter-action@v1
    #     with:
    #       flutter-version: '2.0.5'

    #   - name: Install dependencies
    #     run: dart pub get

    #   # Uncomment this step to verify the use of 'dart format' on each commit.
    #   # - name: Verify formatting
    #   #   run: dart format --output=none --set-exit-if-changed .

    #   # Consider passing '--fatal-infos' for slightly stricter analysis.
    #   - name: Analyze project source
    #     run: dart analyze

    #   # Your project will need to have tests in test/ and a dependency on
    #   # package:test for this step to succeed. Note that Flutter projects will
    #   # want to change this to 'flutter test'.
    #   - name: Run tests
    #     run: |
    #       flutter run --no-sound-null-safety
    #       flutter test integration_test/app_test.dart
          


